package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"strings"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run pop.go <target>")
		return
	}

	target := os.Args[1]
	cmd := exec.Command("nmap", "-p", "80,443", "-sS", "-oG", "-", target)

	output, err := cmd.Output()
	if err != nil {
		fmt.Println("Error running nmap:", err)
		return
	}

	scanner := bufio.NewScanner(strings.NewReader(string(output)))

	var openPorts []string

	for scanner.Scan() {
		line := scanner.Text()
		if strings.Contains(line, "Ports: ") {
			fields := strings.Fields(line)
			for _, field := range fields {
				if strings.HasPrefix(field, "http") {
					openPorts = append(openPorts, strings.TrimSuffix(field, "/open"))
				}
			}
		}
	}

	if len(openPorts) == 0 {
		fmt.Println("No open HTTP/HTTPS ports found")
		return
	}

	fmt.Println("Select an open port to run Gobuster on:")
	for i, port := range openPorts {
		fmt.Printf("%d. %s\n", i+1, port)
	}

	var selection int
	_, err = fmt.Scanln(&selection)
	if err != nil || selection < 1 || selection > len(openPorts) {
		fmt.Println("Invalid selection")
		return
	}

	gobusterCmd := exec.Command("gobuster", "dir", "-u", fmt.Sprintf("http://%s:%s/", target, openPorts[selection-1]), "-w", "/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt", "-t", "50")
	gobusterCmd.Stdout = os.Stdout
	gobusterCmd.Stderr = os.Stderr

	fmt.Printf("Running Gobuster on %s:%s...\n", target, openPorts[selection-1])
	err = gobusterCmd.Run()
	if err != nil {
		fmt.Println("Error running Gobuster:", err)
		return
	}

	var dirToTest string

	scanner = bufio.NewScanner(os.Stdin)
	for {
		fmt.Print("Enter the name of the directory you want to test with SQLMap and XSSer (or q to quit): ")
		if !scanner.Scan() {
			break
		}
		dirToTest = scanner.Text()

		if dirToTest == "q" {
			break
		}

		fmt.Print("Do you want to run SQLMap on this directory (y/n)? ")
		if !scanner.Scan() {
			break
		}
		response := scanner.Text()
		doSQLMap := strings.ToLower(response) == "y"

		fmt.Print("Do you want to run XSSer on this directory (y/n)? ")
		if !scanner.Scan() {
			break
		}
		response = scanner.Text()
		doXSSer := strings.ToLower(response) == "y"

		if doSQLMap {
			sqlmapCmd := exec.Command("sqlmap", "-u", fmt.Sprintf("http://%s:%s/%s", target, openPorts[selection-1], dirToTest))
			sqlmapCmd.Stdout = os.Stdout
			sqlmapCmd.Stderr = os.Stderr

		fmt.Printf("Running SQLMap on http://%s:%s/%s...\n", target, openPorts[selection-1], dirToTest)
            err = sqlmapCmd.Run()
            if err != nil {
                fmt.Println("Error running SQLMap:", err)
            }
        }

        if doXSSer {
            xsserCmd := exec.Command("xsser", "-u", fmt.Sprintf("http://%s:%s/%s", target, openPorts[selection-1], dirToTest), "--auto", "--fuzzer")
            xsserCmd.Stdout = os.Stdout
            xsserCmd.Stderr = os.Stderr

            fmt.Printf("Running XSSer on http://%s:%s/%s...\n", target, openPorts[selection-1], dirToTest)
            err = xsserCmd.Run()
            if err != nil {
                fmt.Println("Error running XSSer:", err)
            }
        }
    }
}
